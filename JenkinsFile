pipeline {
    agent any

    environment {
        DB_HOST = credentials('db-host')
        DB_DATABASE = credentials('db-name')
        DB_USERNAME = credentials('db-user')
        DB_PASSWORD = credentials('db-pass')
        FTP_USER = credentials('ftp-user')
        FTP_PASS = credentials('ftp-pass')
        FTP_HOST = 'ftp.winksen.com'
        WIN_SCP_DLL_PATH = 'C:\\Tools\\Jenkins\\WinSCPnet.dll'
        SSH_USER = credentials('ssh-user')
        SSH_HOST = '92.113.28.219'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/main']],
                          userRemoteConfigs: [[url: 'https://github.com/winksen/Winksen-Portfolio-Backend.git']]
                ])
            }
        }

        // stage('Install Dependencies') {
        //     steps {
        //         powershell '''
        //         Write-Output "Installing Dependencies"
        //         composer install --no-interaction --prefer-dist
        //         '''
        //     }
        // }

        stage('Setup Environment') {
            steps {
                powershell '''
                Copy-Item .env.example .env -Force

                # Read and modify the .env file
                (Get-Content .env) | ForEach-Object {
                    $_ -replace '^DB_HOST=.*', "DB_HOST=${env:DB_HOST}" `
                       -replace '^DB_DATABASE=.*', "DB_DATABASE=${env:DB_DATABASE}" `
                       -replace '^DB_USERNAME=.*', "DB_USERNAME=${env:DB_USERNAME}" `
                       -replace '^DB_PASSWORD=.*', "DB_PASSWORD=${env:DB_PASSWORD}"
                } | Set-Content .env

                php artisan key:generate
                
                # Log the contents of the .env file for verification
                Write-Output "Generated .env file contents:"
                Get-Content .env
                '''
            }
        }

        stage('Run Tests') {
            steps {
                powershell 'php artisan test'
            }
        }

        stage('Deploy via FTP') {
            steps {
                script {
                    powershell '''
                    # Load WinSCP .NET Assembly
                    Add-Type -Path "${env:WIN_SCP_DLL_PATH}"
                    Write-Output "[OK] Load WinSCP .NET Assembly"
                    Write-Host "Looking for WinSCPnet.dll at: ${env:WIN_SCP_DLL_PATH}"
                    Write-Host "Test-Path result for WinSCPnet.dll: $(Test-Path ${env:WIN_SCP_DLL_PATH})"

                    # Set up the FTP Session
                    $sessionOptions = New-Object WinSCP.SessionOptions -Property @{
                        Protocol   = [WinSCP.Protocol]::Ftp
                        HostName   = "${env:FTP_HOST}"
                        UserName   = "${env:FTP_USER}"
                        Password   = "${env:FTP_PASS}"
                    }
                    Write-Output "[OK] Set up the FTP Session"

                    # Initialize and open the session
                    $session = New-Object WinSCP.Session
                    Write-Output "[OK] Set up the FTP Session"
                    try {
                        $session.Open($sessionOptions)
                        Write-Output "[OK] Set up the FTP Session"
                        Write-Host "Current working directory: $(Get-Location)"

                        # Upload the backend to /public_html/backend
                        # Define the absolute path for the local directory (Jenkins workspace)
                        $localPath = "C:\\data\\jenkins\\workspace\\Pipeline-Winksen-Portfolio-Backend"

                        # Define the remote directory
                        $remotePath = "/"

                        Write-Host "Attempting to upload files from $localPath to $remotePath"

                        # Perform the file upload
                        $session.PutFiles("$localPath\\*", $remotePath).Check()  # The "*" ensures all files are uploaded

                        Write-Host "File upload completed successfully."
                        Write-Output "[OK] Set up the FTP Session"

                        Write-Output "[OK] Initialize and open the session"
                        Write-Output "[OK] Deployment successful!"
                    } catch {
                        Write-Error "Error: $_"
                    } finally {
                        $session.Dispose()
                    }
                    '''
                }
            }
        }
    }
}
