pipeline {
    agent any

    environment {
        DB_HOST = credentials('db-host')
        DB_DATABASE = credentials('db-name')
        DB_USERNAME = credentials('db-user')
        DB_PASSWORD = credentials('db-pass')
        FTP_USER = credentials('ftp-user')
        FTP_PASS = credentials('ftp-pass')
        FTP_HOST = 'ftp.winksen.com'
        SSH_USER = credentials('ssh-user')
        SSH_PASS = credentials('ssh-pass')
        SSH_HOST = '92.113.28.219'
        WIN_SCP_DLL_PATH = 'C:\\Tools\\Jenkins\\WinSCPnet.dll'
        SSH_NET_DLL_PATH = 'C:\\Tools\\Jenkins\\Renci.SshNet.dll'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/main']],
                          userRemoteConfigs: [[url: 'https://github.com/winksen/Winksen-Portfolio-Backend.git']]
                ])
            }
        }

        stage('Setup Environment') {
            steps {
                powershell '''
                # Copy .env example and configure DB settings
                Write-Output "[PENDING] Setup Environment..."
                Copy-Item .env.example .env -Force
                (Get-Content .env) | ForEach-Object {
                    $_ -replace '^DB_HOST=.*', "DB_HOST=${env:DB_HOST}" `
                       -replace '^DB_DATABASE=.*', "DB_DATABASE=${env:DB_DATABASE}" `
                       -replace '^DB_USERNAME=.*', "DB_USERNAME=${env:DB_USERNAME}" `
                       -replace '^DB_PASSWORD=.*', "DB_PASSWORD=${env:DB_PASSWORD}"
                } | Set-Content .env
                Write-Output "[OK] Setup Environment Successfully"
                '''
            }
        }

        stage('Deploy via FTP') {
            steps {
                powershell '''
                Add-Type -Path "${env:WIN_SCP_DLL_PATH}"
                $sessionOptions = New-Object WinSCP.SessionOptions -Property @{
                    Protocol   = [WinSCP.Protocol]::Ftp
                    HostName   = "${env:FTP_HOST}"
                    UserName   = "${env:FTP_USER}"
                    Password   = "${env:FTP_PASS}"
                }

                # Define Paths
                $localPath = "C:\\data\\jenkins\\workspace\\Pipeline-Winksen-Portfolio-Backend"
                $remotePath = "/"
                Write-Output "[OK] Define Paths"

                $session = New-Object WinSCP.Session
                try {
                    Write-Output "[PENDING] Upload Files..."
                    $session.Open($sessionOptions)
                    $session.PutFiles("$localPath\\*", $remotePath).Check()  # The "*" ensures all files are uploaded
                    Write-Output "[OK] Upload Files Successfully"
                } finally {
                    $session.Dispose()
                }
                '''
            }
        }

        stage('SSH Commands on Hostinger') {
            steps {
                powershell '''
                # Load SSH.NET assembly (ensure the DLL is available)
                Add-Type -Path "${env:SSH_NET_DLL_PATH}"
                
                # Create SSH connection
                $connectionInfo = New-Object Renci.SshNet.PasswordConnectionInfo("${env:SSH_HOST}", 65002, "${env:SSH_USER}", "${env:SSH_PASS}")
                $sshClient = New-Object Renci.SshNet.SshClient($connectionInfo)

                try {
                    $sshClient.Connect()
                    
                    # Run SSH commands
                    $commands = @(
                        "cd /domains/winksen.com/public_html/backend && composer install --no-interaction --prefer-dist",
                        "cd /domains/winksen.com/public_html/backend && php artisan key:generate",
                        "cd /domains/winksen.com/public_html/backend && php artisan test"
                    )

                    foreach ($cmd in $commands) {
                        Write-Output "Running command: $cmd"
                        $result = $sshClient.RunCommand($cmd)
                        Write-Output $result.Result
                    }
                } finally {
                    $sshClient.Disconnect()
                }
                '''
            }
        }
    }
}
